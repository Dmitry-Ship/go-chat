version: "3.9"

services:
  redis:
    container_name: composeredis
    image: redis:6.2.6-alpine
    restart: always
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes: 
      - ./cache:/data

  database:
    container_name: composepostgres
    image: postgres:14.2-alpine
    ports:
      - ${DB_PORT}:${DB_PORT}
    environment:
      - POSTGRES_DB=$DB_NAME
      - POSTGRES_USER=$DB_USER
      - PGDATA=/pgdata
      - POSTGRES_PASSWORD=$DB_PASSWORD
    volumes:
      - ./db/pgdata:/pgdata

  api:
    environment:
      - PORT=${API_PORT}
      - ORIGIN_URL      
      - DB_PORT
      - DB_HOST
      - DB_NAME
      - DB_USER
      - DB_PASSWORD
      - REDIS_HOST
      - REDIS_PORT
      - REDIS_PASSWORD
    build:
      context: ./backend
      target: dev
    ports:
      - ${API_PORT}:${API_PORT}
    volumes:
      - ./backend:/app
    depends_on:
      - composepostgres
      - composeredis

  frontend:
    environment:
      - NEXT_PUBLIC_WS_DOMAIN=ws://localhost:${API_PORT}
      - NEXT_PUBLIC_API_URL=${API_URL}
    restart: always
    build:
      context: ./frontend
      target: dev
    volumes:
      - ./frontend:/client
      - /client/node_modules/
    ports:
      - 3000:3000
    links:
      - api
    depends_on:
      - api


  # sql_proxy:
  #   environment:
  #     - CLOUDSQL_CONNECTION_NAME
  #     - CLOUDSQL_USER=${DB_USER}
  #     - CLOUDSQL_PASSWORD=${DB_PASSWORD}
  #   image: gcr.io/cloudsql-docker/gce-proxy:1.19.1
  #   command:
  #     - "/cloud_sql_proxy"
  #     - "-dir=/cloudsql"
  #     - "-instances=${CLOUDSQL_CONNECTION_NAME}"
  #     - "-credential_file=/tmp/keys/keyfile.json"
  #   # Allow the container to bind to the unix socket.
  #   user: root
  #   volumes:
  #     - ${GCP_KEY_PATH}:/tmp/keys/keyfile.json:ro
  # - cloudsql:/cloudsql
# volumes:
#   # This empty property initializes a named volume.
#   database:
